<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--启用Spring Aop事物管理，启用之后就可以使用@Transactional了-->
    <tx:annotation-driven></tx:annotation-driven>

    <!--启用基于AOP面向切面编程,启用后就可以使用@Aspect, @Pointcut等注解了-->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>


    <!-- 自动扫描包，开启注解扫描 base-package属性：指定需要扫描的包,多个包之间使用,号隔开 a.b.c a.b.d a.b.e -->
    <context:component-scan base-package="com.gwg">
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
    </context:component-scan>

    <!-- spring的属性加载器，加载properties文件中的属性 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:config.properties</value>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>

    <!--主库-->
    <bean id="dataSourceMaster" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${spring.dataSource.master.dbdriver}"/>
        <property name="url" value="${spring.dataSource.master.dburl}"/>
        <property name="username" value="${spring.dataSource.master.dbUserName}"/>
        <property name="password" value="${spring.dataSource.master.password}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initSize}"/>
        <property name="minIdle" value="${druid.initSize}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
        <property name="defaultAutoCommit" value="${druid.defaultAutoCommit}"/>

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="${druid.validationQuery}"/>
    </bean>

    <!--从库-->
    <bean id="dataSourceSlave" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${spring.dataSource.slaver.dbdriver}"/>
        <property name="url" value="${spring.dataSource.slaver.dburl}"/>
        <property name="username" value="${spring.dataSource.slaver.dbUserName}"/>
        <property name="password" value="${spring.dataSource.slaver.password}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initSize}"/>
        <property name="minIdle" value="${druid.initSize}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
        <property name="defaultAutoCommit" value="${druid.defaultAutoCommit}"/>

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="${druid.validationQuery}"/>
    </bean>

    <!--多数据源配置-->
    <bean id="dynamicDataSource" class="com.gwg.shiro.web.config.jdbc.DynamicDataSource">
        <!--默认为从库-->
        <property name="defaultTargetDataSource" ref="dataSourceSlave"/>
        <property name="targetDataSources">
            <map>
                <entry key="master" value-ref="dataSourceMaster"/>
                <entry key="slave" value-ref="dataSourceSlave"/>
            </map>
        </property>
    </bean>

    <!--事物管理器-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
           <property name="dataSource" ref="dynamicDataSource"></property>
    </bean>

    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"></property>
        <property name="typeAliasesPackage" value="com.gwg.shiro.web.model"></property>
        <property name="mapperLocations" value="classpath:com/gwg/shiro/web/mapper/*.xml"></property>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
        <property name="basePackage" value="com.gwg.shiro.web.mapper"></property>
    </bean>


</beans>
