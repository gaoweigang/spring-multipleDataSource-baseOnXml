初始化spring 根root context的两种方法：
第一种：
通过web.xml配置，ContextLoaderListener通过初始化applicationContext.xml定义的spring配置文件。

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:applicationContext.xml
        </param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>


第二种：
通过继承AbstractAnnotationConfigDispatcherServletInitializer 来初始化AbstractContextLoaderInitializer，也就初始化了WebApplicationInitializer

public class MvcWebApplicationInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {

    @Nullable
    @Override
    protected Class<?>[] getRootConfigClasses() {

        return new Class[] {RootConfig.class};//初始化spring的根容器
        //RootConfig.class相当于平常配置的applicationContext.xml文件
    }

    @Nullable
    @Override
    protected Class<?>[] getServletConfigClasses() {
        return new Class[]
                {SpringMvcConfig.class};//初始化springMVC的子容器
    }

    @Override
    protected String[] getServletMappings() {
        return new String[]{"/"};//springMVC匹配的路径
    }
}
RootConfig.java

//spring 的applicationContext.xml的配置类，等同。
@Configuration
@ComponentScan(basePackages = {"com.unicom.si"},
        excludeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION, value = EnableWebMvc.class)})//排除Controller类的扫描
public class RootConfig {

}

这两种方式，有一种就可以。如果两个都写上了，需要根据自己的情况，去掉一个，只保留一种方式。因为最终初始化根容器的ContextLoader中initWebApplicationContext方法初始化根上下文

 public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {
        //这里判断是否在ServletContext中存在上下文,如果有，说明已载入过或配置文件出错,可以从错误信息中看出
        if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {
            throw new IllegalStateException(
                    "Cannot initialize context because there is already a root application context present - " +
                    "check whether you have multiple ContextLoader* definitions in your web.xml!");
        }

        Log logger = LogFactory.getLog(ContextLoader.class);
        servletContext.log("Initializing Spring root WebApplicationContext");
        if (logger.isInfoEnabled()) {
            logger.info("Root WebApplicationContext: initialization started");
        }
        long startTime = System.currentTimeMillis();
      //.....云 云 下边还有很多
  }

其中servletContext就是servlet中三大对象request、session、application中的最大的application对象。